Wrap command in a {@code CMD.EXE} call so we can return the exit code ({@code ERRORLEVEL}).
This method takes care of escaping special characters in the command, which
is needed since the command is now passed as a string to the {@code CMD.EXE} shell.
This is done as follows:
Wrap arguments in double quotes if they contain any of:
{@code space *?,;^&<>|"}
and if {@code escapeVars} is true, {@code %} followed by a letter.
<p> When testing from command prompt, these characters also need to be
prepended with a ^ character: {@code ^&<>|}â€”however, invoking {@code cmd.exe} from
Jenkins does not seem to require this extra escaping so it is not added by
this method.
<p> A {@code "} is prepended with another {@code "} character.  Note: Windows has issues
escaping some combinations of quotes and spaces.  Quotes should be avoided.
<p> If {@code escapeVars} is true, a {@code %} followed by a letter has that letter wrapped
in double quotes, to avoid possible variable expansion.
ie, {@code %foo%} becomes {@code "%"f"oo%"}.  The second {@code %} does not need special handling
because it is not followed by a letter. <p>
Example: {@code "-Dfoo=*abc?def;ghi^jkl&mno<pqr>stu|vwx""yz%"e"nd"}
@param escapeVars True to escape {@code %VAR%} references; false to leave these alone
so they may be expanded when the command is run
@return new {@link ArgumentListBuilder} that runs given command through {@code cmd.exe /C}
@since 1.386